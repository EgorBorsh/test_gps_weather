package com.smollvile.gpsweather.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORY".
*/
public class StoryDao extends AbstractDao<Story, Long> {

    public static final String TABLENAME = "STORY";

    /**
     * Properties of entity Story.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City = new Property(1, String.class, "City", false, "CITY");
        public final static Property Lat = new Property(2, String.class, "Lat", false, "LAT");
        public final static Property Lon = new Property(3, String.class, "Lon", false, "LON");
        public final static Property Country = new Property(4, String.class, "Country", false, "COUNTRY");
        public final static Property Street = new Property(5, String.class, "Street", false, "STREET");
        public final static Property House = new Property(6, String.class, "House", false, "HOUSE");
        public final static Property Temp = new Property(7, String.class, "Temp", false, "TEMP");
        public final static Property Humidity = new Property(8, String.class, "Humidity", false, "HUMIDITY");
        public final static Property Description = new Property(9, String.class, "Description", false, "DESCRIPTION");
        public final static Property WindSpeed = new Property(10, String.class, "WindSpeed", false, "WIND_SPEED");
    }

    private DaoSession daoSession;


    public StoryDao(DaoConfig config) {
        super(config);
    }
    
    public StoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY\" TEXT," + // 1: City
                "\"LAT\" TEXT," + // 2: Lat
                "\"LON\" TEXT," + // 3: Lon
                "\"COUNTRY\" TEXT," + // 4: Country
                "\"STREET\" TEXT," + // 5: Street
                "\"HOUSE\" TEXT," + // 6: House
                "\"TEMP\" TEXT," + // 7: Temp
                "\"HUMIDITY\" TEXT," + // 8: Humidity
                "\"DESCRIPTION\" TEXT," + // 9: Description
                "\"WIND_SPEED\" TEXT);"); // 10: WindSpeed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Story entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(2, City);
        }
 
        String Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindString(3, Lat);
        }
 
        String Lon = entity.getLon();
        if (Lon != null) {
            stmt.bindString(4, Lon);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(5, Country);
        }
 
        String Street = entity.getStreet();
        if (Street != null) {
            stmt.bindString(6, Street);
        }
 
        String House = entity.getHouse();
        if (House != null) {
            stmt.bindString(7, House);
        }
 
        String Temp = entity.getTemp();
        if (Temp != null) {
            stmt.bindString(8, Temp);
        }
 
        String Humidity = entity.getHumidity();
        if (Humidity != null) {
            stmt.bindString(9, Humidity);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(10, Description);
        }
 
        String WindSpeed = entity.getWindSpeed();
        if (WindSpeed != null) {
            stmt.bindString(11, WindSpeed);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Story entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(2, City);
        }
 
        String Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindString(3, Lat);
        }
 
        String Lon = entity.getLon();
        if (Lon != null) {
            stmt.bindString(4, Lon);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(5, Country);
        }
 
        String Street = entity.getStreet();
        if (Street != null) {
            stmt.bindString(6, Street);
        }
 
        String House = entity.getHouse();
        if (House != null) {
            stmt.bindString(7, House);
        }
 
        String Temp = entity.getTemp();
        if (Temp != null) {
            stmt.bindString(8, Temp);
        }
 
        String Humidity = entity.getHumidity();
        if (Humidity != null) {
            stmt.bindString(9, Humidity);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(10, Description);
        }
 
        String WindSpeed = entity.getWindSpeed();
        if (WindSpeed != null) {
            stmt.bindString(11, WindSpeed);
        }
    }

    @Override
    protected final void attachEntity(Story entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Story readEntity(Cursor cursor, int offset) {
        Story entity = new Story( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // City
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Lat
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Lon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Country
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Street
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // House
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Temp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Humidity
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Description
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // WindSpeed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Story entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLat(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCountry(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStreet(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHouse(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTemp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHumidity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDescription(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWindSpeed(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Story entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Story entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Story entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
